// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	//Decode if a or c instruction
	Not(in = instruction[15], out = decodeA);
		
	//If it's an A instruction then load the value into the A register
	Mux16(a = ALUOut, b = instruction, sel = decodeA, out = muxAOutput);
	
	//Determine wether we load the A register or not. This can happen if:
	//1. It's an A instruction
	//2. The C instruction instructs the ALU to output to the A register using the bit 5
	Or(a = decodeA, b = instruction[5], out = loadA); 
	//Also output to addressM
	ARegister(in = muxAOutput, load = loadA, out = ARegisterOut, out[0..14] = addressM);
	
	
	//Determine wether we load the ALU with the A register or inM
	Mux16(a = ARegisterOut, b = inM, sel = instruction[12]	, out = muxAOutputOrMem);
	
	//D Register (it loads if the dest bit for the D register is set)
	And(a = instruction[4], b = instruction[15], out = d1);
	DRegister(in = ALUOut, load = d1, out = DRegisterOut);
	
	//ALU
	ALU(x=DRegisterOut, y=muxAOutputOrMem, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, out=outM, zr=zr, ng=ng
    );
	
	//Write to memory? Must be a C instruction and the appropriate bit set
	And(a = instruction[15], b = instruction[3], out = writeM);
	
	//Find out if we need to jump
	//1. Zero?
	And(a = zr, b = instruction[1], out = JEQ); 
	//2. Negative?
	And(a = ng, b = instruction[2], out = JLT);
	//3. Positive?
	Not(in = ng, out = positive);
	Not(in = zr, out = notZero);
	And(a = positive, b = notZero, out = jumpGT);
	And(a = jumpGT, b = instruction[0], out = JGT);
	
	//And now or them all together
	Or(a = JEQ, b = JLT, out = JLE);
	Or(a = JLE, b = JGT, out = JMPDecision);
	
	//Check if it's a C instruction
	And(a = JMPDecision, b = instruction[15], out = JMP);
	
	PC(in = ARegisterOut, load = JMP, inc = true, reset = reset, out[0..14] = pc);
}